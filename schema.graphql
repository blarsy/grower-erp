"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Unit`."""
  allUnits(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnitCondition
  ): UnitsConnection
  unitById(id: Int!): Unit

  """Reads a single `Unit` using its globally unique `ID`."""
  unit(
    """The globally unique `ID` to be used in selecting a single `Unit`."""
    nodeId: ID!
  ): Unit
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Unit` values."""
type UnitsConnection {
  """A list of `Unit` objects."""
  nodes: [Unit]!

  """
  A list of edges which contains the `Unit` and cursor to aid in pagination.
  """
  edges: [UnitsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Unit` you could get from the connection."""
  totalCount: Int!
}

type Unit implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  abbreviation: String!
}

"""A `Unit` edge in the connection."""
type UnitsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Unit` at the end of the edge."""
  node: Unit
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `Unit`."""
enum UnitsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ABBREVIATION_ASC
  ABBREVIATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Unit` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UnitCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `abbreviation` field."""
  abbreviation: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Unit`."""
  createUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUnitInput!
  ): CreateUnitPayload

  """Updates a single `Unit` using its globally unique id and a patch."""
  updateUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUnitInput!
  ): UpdateUnitPayload

  """Updates a single `Unit` using a unique key and a patch."""
  updateUnitById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUnitByIdInput!
  ): UpdateUnitPayload

  """Deletes a single `Unit` using its globally unique id."""
  deleteUnit(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUnitInput!
  ): DeleteUnitPayload

  """Deletes a single `Unit` using a unique key."""
  deleteUnitById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUnitByIdInput!
  ): DeleteUnitPayload
}

"""The output of our create `Unit` mutation."""
type CreateUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Unit` that was created by this mutation."""
  unit: Unit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}

"""All input for the create `Unit` mutation."""
input CreateUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Unit` to be created by this mutation."""
  unit: UnitInput!
}

"""An input for mutations affecting `Unit`"""
input UnitInput {
  id: Int
  name: String!
  abbreviation: String!
}

"""The output of our update `Unit` mutation."""
type UpdateUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Unit` that was updated by this mutation."""
  unit: Unit

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}

"""All input for the `updateUnit` mutation."""
input UpdateUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Unit` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Unit` being updated.
  """
  unitPatch: UnitPatch!
}

"""Represents an update to a `Unit`. Fields that are set will be updated."""
input UnitPatch {
  id: Int
  name: String
  abbreviation: String
}

"""All input for the `updateUnitById` mutation."""
input UpdateUnitByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Unit` being updated.
  """
  unitPatch: UnitPatch!
  id: Int!
}

"""The output of our delete `Unit` mutation."""
type DeleteUnitPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Unit` that was deleted by this mutation."""
  unit: Unit
  deletedUnitId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Unit`. May be used by Relay 1."""
  unitEdge(
    """The method to use when ordering `Unit`."""
    orderBy: [UnitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnitsEdge
}

"""All input for the `deleteUnit` mutation."""
input DeleteUnitInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Unit` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUnitById` mutation."""
input DeleteUnitByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}
